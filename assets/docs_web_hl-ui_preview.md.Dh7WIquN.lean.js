import{ax as n,t as o,aV as a,U as i,v as s,S as r,ai as e,q as h}from"./chunks/framework.BpP86C7U.js";const v=JSON.parse('{"title":"上传","description":"","frontmatter":{"title":"上传"},"headers":[],"relativePath":"docs/web/hl-ui/preview.md","filePath":"docs/web/hl-ui/preview.md","lastUpdated":1730096765000}'),p={name:"docs/web/hl-ui/preview.md"};function k(c,t,u,m,E,b){const d=e("hl-demo-preview"),l=e("hl-demo-preview-mul");return h(),o("div",null,[t[0]||(t[0]=a('<h2 id="附件预览" tabindex="-1">附件预览 <a class="header-anchor" href="#附件预览" aria-label="Permalink to &quot;附件预览&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">提醒</p><p>hl-preview 可以展示所有的附件，建议优先使用hl-preview，在不方便或不满足需求的情况下使用hl-image、hl-video、hl-file和自定义组件</p></div><div class="danger custom-block"><p class="custom-block-title">特别提醒</p><p>后端返回的数据是直接给文件预览地址，而且字段都是定死的，不允许做任何适配和自定义组件，特殊情况讨论后再做定夺</p></div><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3>',4)),i(d),t[1]||(t[1]=s("blockquote",null,[s("p",null,"基本用法中可以看到针对不同类型的附件类型，都做了不同的点击查看效果")],-1)),t[2]||(t[2]=s("h3",{id:"多附件样式问题",tabindex:"-1"},[r("多附件样式问题 "),s("a",{class:"header-anchor",href:"#多附件样式问题","aria-label":'Permalink to "多附件样式问题"'},"​")],-1)),t[3]||(t[3]=s("p",null,"在上面的例子中多个附加默认都被flex容器包裹，展示不是太友好，可以添加card属性来指定文件以卡片展示或者覆盖.hl-file-item类的样式：",-1)),i(l),t[4]||(t[4]=a(`<h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>files</td><td>文件</td><td>Object/Array</td><td>—</td><td>null</td></tr><tr><td>height</td><td>图片、视频、卡片展示的文件等外层容器的高度</td><td>String</td><td>—</td><td>100px</td></tr><tr><td>width</td><td>图片、视频、卡片展示的文件等外层容器的宽度</td><td>String</td><td>—</td><td>100px</td></tr><tr><td>card</td><td>是否以卡片形式展示</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>no-preview</td><td>默认每个类型附件都带有点击查看效果，该属性可以禁止查看行为</td><td>Boolean</td><td>—</td><td>false</td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">警告</p><p>最后一次提醒：files的数据结构已经定死，不允许做任何兼容处理，对象结构如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文件ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文件名(原始名称，不是后端自己生成的随机数)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文件访问路径&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div>`,3))])}const q=n(p,[["render",k]]);export{v as __pageData,q as default};
