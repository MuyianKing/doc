import{ax as h,t as l,aU as e,V as a,ai as d,q as n}from"./chunks/framework.DRauMKQ-.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/web/hl-ui/button-type.md","filePath":"docs/web/hl-ui/button-type.md","lastUpdated":1725062878000}'),b={name:"docs/web/hl-ui/button-type.md"};function i(s,t,u,c,p,m){const o=d("hl-demo-button-type"),r=d("hl-demo-button-type-table");return n(),l("div",null,[t[0]||(t[0]=e('<blockquote><p>为了统一样式，内置了几个按钮组件，需要注意的是在以下的几个场景下必须使用预设按钮</p></blockquote><h3 id="普通按钮" tabindex="-1">普通按钮 <a class="header-anchor" href="#普通按钮" aria-label="Permalink to &quot;普通按钮&quot;">​</a></h3><h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h4><blockquote><p>普通按钮只是对<a href="/doc/docs/web/hl-ui/button.html">hl-button</a>简单封装了一下，规定了按钮的图标，颜色</p></blockquote>',4)),a(o),t[1]||(t[1]=e('<h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>icon</td><td>是否展示图标</td><td>Boolean</td><td>—</td><td>true</td></tr><tr><td>text</td><td>按钮文字</td><td>String</td><td>—</td><td>—</td></tr></tbody></table><h3 id="列表按钮" tabindex="-1">列表按钮 <a class="header-anchor" href="#列表按钮" aria-label="Permalink to &quot;列表按钮&quot;">​</a></h3><h4 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-label="Permalink to &quot;基本使用&quot;">​</a></h4><blockquote><p>列表按钮主要用在列表的操作中，默认形式是图标或者文字</p></blockquote>',5)),a(r),t[2]||(t[2]=e('<h4 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h4><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>icon</td><td>图标</td><td>String</td><td>—</td><td>—</td></tr><tr><td>text</td><td>按钮文字：删除按钮时类型可为String和Boolean，其他只能为Boolean</td><td>Boolean 、 String</td><td>—</td><td>—</td></tr></tbody></table><h4 id="删除按钮属性" tabindex="-1">删除按钮属性 <a class="header-anchor" href="#删除按钮属性" aria-label="Permalink to &quot;删除按钮属性&quot;">​</a></h4><blockquote><p>当我们点击删除时，一般情况下都需要用户点击确定再继续操作，删除按钮已经实现了这一功能，开发中我们只需要绑定click事件即可</p></blockquote><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>message</td><td>点击删除时的确认信息</td><td>String</td><td>—</td><td>您确定确认删除？</td></tr><tr><td>noPopover</td><td>禁用提示</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>placement</td><td>提示的出现位置</td><td>String</td><td>取值同<a href="https://element-plus.org/zh-CN/component/popover.html#attributes" target="_blank" rel="noreferrer">el-popover</a></td><td>top</td></tr></tbody></table><h4 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h4><table tabindex="0"><thead><tr><th>插槽名</th><th>说明</th></tr></thead><tbody><tr><td>default</td><td>自定义按钮，因为默认都是图标按钮所以只有text为true时生效</td></tr></tbody></table>',7))])}const k=h(b,[["render",i]]);export{f as __pageData,k as default};
