import{aw as i,t as d,v as a,S as s,U as l,aU as r,ai as h,q as n}from"./chunks/framework.CbHxagKl.js";const m=JSON.parse('{"title":"图片","description":"","frontmatter":{"title":"图片"},"headers":[],"relativePath":"docs/web/hl-ui/image.md","filePath":"docs/web/hl-ui/image.md","lastUpdated":1728634145000}'),o={name:"docs/web/hl-ui/image.md"};function p(k,t,c,b,g,u){const e=h("hl-demo-image");return n(),d("div",null,[t[0]||(t[0]=a("h3",{id:"基本用法",tabindex:"-1"},[s("基本用法 "),a("a",{class:"header-anchor",href:"#基本用法","aria-label":'Permalink to "基本用法"'},"​")],-1)),l(e),t[1]||(t[1]=r(`<p>默认object-fit为contain, 可通过设置fit属性确定图片如何适应到容器框，取值同原生<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit" target="_blank" rel="noreferrer">object-fit</a></p><h3 id="图片地址" tabindex="-1">图片地址 <a class="header-anchor" href="#图片地址" aria-label="Permalink to &quot;图片地址&quot;">​</a></h3><ul><li>组件会调用外部项目透传进来的previewFileUrl生成最终的访问路径</li><li>大部分情况下previewFileUrl的逻辑如下 <ul><li>地址以http开头直接在尾部拼上token</li><li>不是以http开头则在头部拼上preview，在尾部拼上token</li></ul></li></ul><h3 id="图片预览" tabindex="-1">图片预览 <a class="header-anchor" href="#图片预览" aria-label="Permalink to &quot;图片预览&quot;">​</a></h3><ul><li>组件默认开启预览，无需设置</li><li>没有指定预览地址时，预览地址就是图片地址</li><li>也可以通过preview属性指定预览地址，preview是数组，数组元素即图片预览地址，需要注意的是这个预览地址组件不会像上面一样处理</li></ul><h4 id="关闭预览" tabindex="-1">关闭预览 <a class="header-anchor" href="#关闭预览" aria-label="Permalink to &quot;关闭预览&quot;">​</a></h4><p>只需要将no-preview属性设为true</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">hl-image</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> no-preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>src</td><td>图片地址</td><td>String</td><td>—</td><td>—</td></tr><tr><td>height</td><td>图片高度</td><td>String</td><td>—</td><td>100px</td></tr><tr><td>width</td><td>图片宽度</td><td>String</td><td>—</td><td>100px</td></tr><tr><td>fit</td><td>同css object-fit</td><td>String</td><td>—</td><td>cover</td></tr><tr><td>preview</td><td>预览图片地址</td><td>Array</td><td>—</td><td>[]</td></tr><tr><td>noPreview</td><td>是否关闭预览</td><td>Boolean</td><td>—</td><td>false</td></tr></tbody></table><h3 id="table插槽" tabindex="-1">Table插槽 <a class="header-anchor" href="#table插槽" aria-label="Permalink to &quot;Table插槽&quot;">​</a></h3><table tabindex="0"><thead><tr><th>插槽名</th><th>说明</th></tr></thead><tbody><tr><td>placeholder</td><td>当图像尚未加载时，自定义的占位符内容</td></tr><tr><td>default</td><td>其他需要显示的内容</td></tr></tbody></table>`,12))])}const f=i(o,[["render",p]]);export{m as __pageData,f as default};
