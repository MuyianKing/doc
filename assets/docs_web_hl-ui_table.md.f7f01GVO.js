import{ax as h,q as s,aU as r,U as a,t as d,S as e,ai as l,p as u}from"./chunks/framework.DlZuXbTw.js";const y=JSON.parse('{"title":"表格","description":"","frontmatter":{"title":"表格"},"headers":[],"relativePath":"docs/web/hl-ui/table.md","filePath":"docs/web/hl-ui/table.md","lastUpdated":1727584885000}'),m={name:"docs/web/hl-ui/table.md"};function c(p,t,g,f,x,k){const o=l("hl-demo-table"),n=l("hl-demo-table-fixed"),i=l("hl-demo-table-nowrap"),b=l("hl-demo-table-header");return u(),s("div",null,[t[0]||(t[0]=r('<h3 id="table-表格" tabindex="-1">Table 表格 <a class="header-anchor" href="#table-表格" aria-label="Permalink to &quot;Table 表格&quot;">​</a></h3><blockquote><p>Element Plus的<a href="https://element-plus.gitee.io/zh-CN/component/table.html" target="_blank" rel="noreferrer">el-table</a>的单元格无法根据内容的长度分配单元格宽度，导致一些列在没有数据的情况下会显得特别空，hl-table就是为了解决此问题</p></blockquote><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>项目中为了保持代码一致性，请大家统一使用hl-table作为表格渲染组件<br></li><li>但是如果表格有单元格合并需求请使用el-table或原生table</li></ul></div><h3 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h3>',4)),a(o),t[1]||(t[1]=d("h3",{id:"表头固定",tabindex:"-1"},[e("表头固定 "),d("a",{class:"header-anchor",href:"#表头固定","aria-label":'Permalink to "表头固定"'},"​")],-1)),t[2]||(t[2]=d("blockquote",null,[d("p",null,"组件默认带有表头固定功能，且不能取消")],-1)),t[3]||(t[3]=d("blockquote",null,[d("p",null,[e("默认表格主体部分的高度等于外层容器高度减去表头高度；"),d("br"),e(" 当外层容器高度不固定或这需要自定义最大高度时可以通过maxHeight属性设置表格主体的最大高度")])],-1)),a(n),t[4]||(t[4]=d("h3",{id:"内容隐藏",tabindex:"-1"},[e("内容隐藏 "),d("a",{class:"header-anchor",href:"#内容隐藏","aria-label":'Permalink to "内容隐藏"'},"​")],-1)),t[5]||(t[5]=d("blockquote",null,[d("p",null,"默认情况下，hl-table会以换行的形式将内容全部显示出来，当我们需要用...截断文字时可以将nowrap设为true实现")],-1)),a(i),t[6]||(t[6]=d("h3",{id:"表头定制",tabindex:"-1"},[e("表头定制 "),d("a",{class:"header-anchor",href:"#表头定制","aria-label":'Permalink to "表头定制"'},"​")],-1)),t[7]||(t[7]=d("blockquote",null,[d("p",null,"需求：当表格字段过多时我们希望可以自定义显示的字段")],-1)),t[8]||(t[8]=d("p",null,"hl-table内部实现了表头定制的组件，可以通过edit-header属性控制组件的显示与隐藏，用户配置的需要显示的字段信息保存在了storage中，这样保证下次打开的内容和当前一致，所以还需要配置storage对应的key值",-1)),a(b),t[9]||(t[9]=r('<ul><li>storage-key：整个项目必须唯一</li></ul><h3 id="单元格宽度" tabindex="-1">单元格宽度 <a class="header-anchor" href="#单元格宽度" aria-label="Permalink to &quot;单元格宽度&quot;">​</a></h3><blockquote><ul><li>原生标签td即使设置了宽度，最终渲染出来的单元格的宽度也是根据内容来分配的，设置的宽度只是作为其中一个分配因子。<br></li><li>hl-table-column的width属性表现效果和原生td保持一致。<br></li><li>hl-table-column的min-width设置最小宽度</li></ul></blockquote><h3 id="table属性" tabindex="-1">Table属性 <a class="header-anchor" href="#table属性" aria-label="Permalink to &quot;Table属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>数据源</td><td>Array</td><td>—</td><td>[]</td></tr><tr><td>maxHeight</td><td>表格的最大高度：不包括表头</td><td>String</td><td>—</td><td>—</td></tr><tr><td>nowrap</td><td>内容是否换行</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>align</td><td>单元格对齐方式</td><td>String</td><td>left/right/center</td><td>center</td></tr><tr><td>hover</td><td>鼠标hover行上的鼠标样式</td><td>Array</td><td>css - cursor</td><td>default</td></tr><tr><td>border</td><td>是否显示边框</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>borderColor</td><td>边框颜色</td><td>String</td><td>—</td><td>#333</td></tr><tr><td>borderWidth</td><td>边框宽度</td><td>String</td><td>—</td><td>1px</td></tr><tr><td>emptyText</td><td>没有数据时显示的文字</td><td>String</td><td>—</td><td>没有数据</td></tr><tr><td>hightLight</td><td>是否高亮选中行</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>lightLine</td><td>默认高亮的行数</td><td>Number</td><td>—</td><td>0</td></tr><tr><td>editHeader</td><td>控制显示和隐藏表头定制</td><td>Boolean</td><td>—</td><td>false</td></tr><tr><td>storageKey</td><td>自定义表头的信息存储在localstorage，storageKey为对应的key值</td><td>String</td><td>—</td><td>—</td></tr><tr><td>rowClass</td><td>行样式，可以根据方法的回调参数自定义每一行的样式</td><td>Function(row,index)</td><td>-</td><td>-</td></tr><tr><td>tooltipEffect</td><td>文字提示的样式</td><td>String</td><td>light/dark</td><td>light</td></tr><tr><td>tooltopMaxWidth</td><td>文字提示框的最大宽度</td><td>String</td><td>css宽度样式</td><td>90vw</td></tr></tbody></table><h3 id="table方法" tabindex="-1">Table方法 <a class="header-anchor" href="#table方法" aria-label="Permalink to &quot;Table方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>doLayout</td><td>重新布局</td><td>—</td></tr></tbody></table><h3 id="table事件" tabindex="-1">Table事件 <a class="header-anchor" href="#table事件" aria-label="Permalink to &quot;Table事件&quot;">​</a></h3><table tabindex="0"><thead><tr><th>事件名</th><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>rowClick</td><td>点击行触发</td><td>(row:Object, index:Number)</td></tr></tbody></table><h3 id="table插槽" tabindex="-1">Table插槽 <a class="header-anchor" href="#table插槽" aria-label="Permalink to &quot;Table插槽&quot;">​</a></h3><table tabindex="0"><thead><tr><th>插槽名</th><th>说明</th></tr></thead><tbody><tr><td>empty</td><td>当数据为空时自定义的内容</td></tr></tbody></table><h3 id="tablecolumn属性" tabindex="-1">TableColumn属性 <a class="header-anchor" href="#tablecolumn属性" aria-label="Permalink to &quot;TableColumn属性&quot;">​</a></h3><table tabindex="0"><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>列的类型</td><td>String</td><td>default/index</td><td>default</td></tr><tr><td>prop</td><td>字段名</td><td>String</td><td>-</td><td>-</td></tr><tr><td>label</td><td>表头名</td><td>String</td><td>-</td><td>-</td></tr><tr><td>index</td><td>索引，默认从1开始计数,传入方法时，会将当前索引作为参数传过去</td><td>String/Number/Function</td><td>-</td><td>-</td></tr><tr><td>width</td><td>宽度,可以是20也可以是20px，即使设置了此宽度，最后渲染出来的宽度还是要以原生table自适应的结果为准</td><td>String/Number</td><td>-</td><td>-</td></tr><tr><td>minWidth</td><td>最小宽度,和el-table的逻辑不同，hl-table不会根据最小宽度去分配宽度，就是设置了最小宽度</td><td>String/Number</td><td>-</td><td>-</td></tr><tr><td>align</td><td>对齐方式</td><td>String</td><td>center/right/left</td><td>-</td></tr><tr><td>style</td><td>自定义样式</td><td>String/Object</td><td>-</td><td>-</td></tr><tr><td>className</td><td>自定义class</td><td>String</td><td>-</td><td>-</td></tr><tr><td>labelStyle</td><td>自定义表头样式</td><td>String/Object</td><td>-</td><td>-</td></tr></tbody></table><h3 id="tablecolumn插槽" tabindex="-1">TableColumn插槽 <a class="header-anchor" href="#tablecolumn插槽" aria-label="Permalink to &quot;TableColumn插槽&quot;">​</a></h3><table tabindex="0"><thead><tr><th>插槽名</th><th>说明</th></tr></thead><tbody><tr><td>default</td><td>自定义列的内容 作用域参数为 &quot;{row, index}&quot;</td></tr><tr><td>header</td><td>自定义表头的内容</td></tr></tbody></table>',15))])}const S=h(m,[["render",c]]);export{y as __pageData,S as default};
